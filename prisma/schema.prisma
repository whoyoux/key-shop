// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// enum OfferType {
//   GAME
//   SOFTWARE
// }

model Offer {
  id               String @id @default(cuid())
  title            String
  shortDescription String @map("short_description")
  description      String
  price            Float
  imageUrl         String

  type       String
  developers String //NEED TO CHANGE TO String[]
  publishers String //NEED TO CHANGE TO String[]

  screenshots Screenshot[]
  keys        Key[]
  // genres      Genre[]

  windowsSupport Boolean
  macSupport     Boolean
  linuxSupport   Boolean

  isDiscount      Boolean @default(false) @map("is_discount")
  discontPrice    Float?  @map("discount_amount")
  discountPercent Float?  @map("discount_percent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Screenshot {
  id            String @id @default(cuid())
  pathFull      String @map("path_full")
  pathThumbnail String @map("path_thumbnail")

  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String
}

// model Genre {
//   id          String @id @default(cuid())
//   genreId     String @map("genre_id")
//   description String
//   offer       Offer  @relation(fields: [id], references: [id], onDelete: Cascade)
// }

model Key {
  id     String  @id @default(cuid())
  key    String
  isUsed Boolean @default(false)

  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order?
}

model Order {
  id String @id @default(cuid())

  offer   Offer  @relation(fields: [offerId], references: [id])
  offerId String @map("offer_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  key   Key?    @relation(fields: [keyId], references: [id])
  keyId String? @unique @map("key_id")

  isPaid     Boolean   @default(false) @map("is_paid")
  paidAt     DateTime? @map("paid_at")
  paidAmount Float?    @map("paid_amount")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
